<!--
Copyright (c) 2014, 2015 Wieland Hoffmann, Jeff Weeks
-->
<types>
  <fieldtype name="string" class="solr.StrField" sortMissingLast="false" />
  <fieldType name="long" class="solr.LongPointField" positionIncrementGap="0" />
  <fieldType name="mbid" class="solr.UUIDField" omitNorms="true" />
  <fieldType name="storefield" class="solr.StrField" />
  <fieldType name="storefieldmv" class="solr.StrField" docValues="true" />
  <fieldType name="bool" class="solr.BoolField" />
  <fieldType name="date" class="solr.DateRangeField" sortMissingLast="false" />
  <fieldType name="int" class="solr.IntPointField" sortMissingLast="false" />
  <fieldType name="float" class="solr.FloatPointField" />
  <!-- A general text field that has reasonable, generic
         cross-language defaults

         An attempt at replicating the steps in MusicBrainzAnalyzer.java -->
  <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <charFilter class="solr.MappingCharFilterFactory" mapping="common/mapping-MBCharEquivToChar.txt" />
      <tokenizer class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFilterFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzWordDelimiterGraphFilterFactory" generateWordParts="1"
      generateNumberParts="0" catenateWords="0" catenateNumbers="6" catenateAll="0" splitOnCaseChange="0"
      preserveOriginal="0" splitOnNumerics="0" stemEnglishPossessive="0" />
      <filter class="solr.LowerCaseFilterFactory" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory"
      id="[ー[:Script=Katakana:]]Katakana-Hiragana" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory" id="Traditional-Simplified" />
      <filter class="org.apache.lucene.analysis.icu.ICUFoldingFilterFactory" />
    </analyzer>
  </fieldType>
  <!-- Like text, but used for fields with multiple values
         Replaces MusicbrainzWithPosGapAnalyzer.java -->
  <fieldType name="text_mult" class="solr.TextField" positionIncrementGap="1">
    <analyzer>
      <charFilter class="solr.MappingCharFilterFactory" mapping="common/mapping-MBCharEquivToChar.txt" />
      <tokenizer class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFilterFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzWordDelimiterGraphFilterFactory" generateWordParts="1"
      generateNumberParts="0" catenateWords="0" catenateNumbers="6" catenateAll="0" splitOnCaseChange="0"
      preserveOriginal="0" splitOnNumerics="0" stemEnglishPossessive="0" />
      <filter class="solr.LowerCaseFilterFactory" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory"
      id="[ー[:Script=Katakana:]]Katakana-Hiragana" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory" id="Traditional-Simplified" />
      <filter class="org.apache.lucene.analysis.icu.ICUFoldingFilterFactory" />
    </analyzer>
  </fieldType>
  <fieldType name="title" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([N|n][O|o]\.)\s+(\d+)" replacement="$1$2" />
      <charFilter class="solr.MappingCharFilterFactory" mapping="common/mapping-MBCharEquivToChar.txt" />
      <tokenizer class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFilterFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzWordDelimiterGraphFilterFactory" generateWordParts="1"
      generateNumberParts="0" catenateWords="0" catenateNumbers="6" catenateAll="0" splitOnCaseChange="0"
      preserveOriginal="0" splitOnNumerics="0" stemEnglishPossessive="0" />
      <filter class="solr.LowerCaseFilterFactory" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory"
      id="[ー[:Script=Katakana:]]Katakana-Hiragana" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory" id="Traditional-Simplified" />
      <filter class="org.apache.lucene.analysis.icu.ICUFoldingFilterFactory" />
    </analyzer>
  </fieldType>
  <fieldType name="title_mult" class="solr.TextField" positionIncrementGap="1">
    <analyzer>
      <charFilter class="solr.MappingCharFilterFactory" mapping="common/mapping-MBCharEquivToChar.txt" />
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([N|n][O|o]\.)\s+(\d+)" replacement="$1$2" />
      <tokenizer class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFilterFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzWordDelimiterGraphFilterFactory" generateWordParts="1"
      generateNumberParts="0" catenateWords="0" catenateNumbers="6" catenateAll="0" splitOnCaseChange="0"
      preserveOriginal="0" splitOnNumerics="0" stemEnglishPossessive="0" />
      <filter class="solr.LowerCaseFilterFactory" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory"
      id="[ー[:Script=Katakana:]]Katakana-Hiragana" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory" id="Traditional-Simplified" />
      <filter class="org.apache.lucene.analysis.icu.ICUFoldingFilterFactory" />
    </analyzer>
  </fieldType>
  <fieldType name="title_mult_release_similarity" class="solr.TextField" positionIncrementGap="1">
    <analyzer>
      <charFilter class="solr.MappingCharFilterFactory" mapping="common/mapping-MBCharEquivToChar.txt" />
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([N|n][O|o]\.)\s+(\d+)" replacement="$1$2" />
      <tokenizer class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFilterFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzWordDelimiterGraphFilterFactory" generateWordParts="1"
      generateNumberParts="0" catenateWords="0" catenateNumbers="6" catenateAll="0" splitOnCaseChange="0"
      preserveOriginal="0" splitOnNumerics="0" stemEnglishPossessive="0" />
      <filter class="solr.LowerCaseFilterFactory" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory"
      id="[ー[:Script=Katakana:]]Katakana-Hiragana" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory" id="Traditional-Simplified" />
      <filter class="org.apache.lucene.analysis.icu.ICUFoldingFilterFactory" />
    </analyzer>
  </fieldType>
  <fieldType name="keep_accents" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <charFilter class="solr.MappingCharFilterFactory" mapping="common/mapping-MBCharEquivToChar.txt" />
      <tokenizer class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFilterFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzWordDelimiterGraphFilterFactory" generateWordParts="1"
      generateNumberParts="0" catenateWords="0" catenateNumbers="6" catenateAll="0" splitOnCaseChange="0"
      preserveOriginal="0" splitOnNumerics="0" stemEnglishPossessive="0" />
      <filter class="solr.LowerCaseFilterFactory" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory"
      id="[ー[:Script=Katakana:]]Katakana-Hiragana" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory" id="Traditional-Simplified" />
    </analyzer>
  </fieldType>
  <fieldType name="title_keep_accents" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([N|n][O|o]\.)\s+(\d+)" replacement="$1$2" />
      <charFilter class="solr.MappingCharFilterFactory" mapping="common/mapping-MBCharEquivToChar.txt" />
      <tokenizer class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFilterFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzWordDelimiterGraphFilterFactory" generateWordParts="1"
      generateNumberParts="0" catenateWords="0" catenateNumbers="6" catenateAll="0" splitOnCaseChange="0"
      preserveOriginal="0" splitOnNumerics="0" stemEnglishPossessive="0" />
      <filter class="solr.LowerCaseFilterFactory" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory"
      id="[ー[:Script=Katakana:]]Katakana-Hiragana" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory" id="Traditional-Simplified" />
    </analyzer>
  </fieldType>
  <!-- lowercases the entire field value, keeping it as a single token.  -->
  <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.KeywordTokenizerFactory" />
      <filter class="solr.LowerCaseFilterFactory" />
    </analyzer>
  </fieldType>
  <!-- lowercases the entire field value, keeping it as a single token; uses position
      increment gap of 1 as recommended for fields with multiple values  -->
  <fieldType name="lowercase_mult" class="solr.TextField" positionIncrementGap="1">
    <analyzer>
      <tokenizer class="solr.KeywordTokenizerFactory" />
      <filter class="solr.LowerCaseFilterFactory" />
    </analyzer>
  </fieldType>
  <fieldType name="ngram" class="solr.TextField" positionIncrementGap="100">
    <analyzer type="query">
      <charFilter class="solr.MappingCharFilterFactory" mapping="common/mapping-MBCharEquivToChar.txt" />
      <tokenizer class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFilterFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzWordDelimiterGraphFilterFactory" generateWordParts="1"
      generateNumberParts="0" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"
      preserveOriginal="0" splitOnNumerics="0" stemEnglishPossessive="0" />
      <filter class="solr.LowerCaseFilterFactory" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory"
      id="[ー[:Script=Katakana:]]Katakana-Hiragana" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory" id="Traditional-Simplified" />
      <filter class="org.apache.lucene.analysis.icu.ICUFoldingFilterFactory" />
    </analyzer>
    <analyzer type="index">
      <charFilter class="solr.MappingCharFilterFactory" mapping="common/mapping-MBCharEquivToChar.txt" />
      <tokenizer class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzTokenizerFilterFactory" />
      <filter class="org.musicbrainz.search.analysis.MusicbrainzWordDelimiterGraphFilterFactory" generateWordParts="1"
      generateNumberParts="0" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"
      preserveOriginal="0" splitOnNumerics="0" stemEnglishPossessive="0" />
      <filter class="solr.LowerCaseFilterFactory" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory"
      id="[ー[:Script=Katakana:]]Katakana-Hiragana" />
      <filter class="org.apache.lucene.analysis.icu.ICUTransformFilterFactory" id="Traditional-Simplified" />
      <filter class="org.apache.lucene.analysis.icu.ICUFoldingFilterFactory" />
      <filter class="solr.NGramFilterFactory" minGramSize="3" maxGramSize="10" />
    </analyzer>
  </fieldType>
  <!-- for use with string fields where there can be multiple values -->
  <fieldtype name="string_mult" class="solr.StrField" sortMissingLast="false" positionIncrementGap="1" />
  <!-- Strips leading zeroes from a string -->
  <fieldType name="strip_spaces_and_leading_zeroes" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([\s]+)" replacement="" />
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(^[0]+)" replacement="" />
      <tokenizer class="solr.KeywordTokenizerFactory" />
      <filter class="solr.LowerCaseFilterFactory" />
    </analyzer>
  </fieldType>
  <!-- Strips leading zeroes from a string (multiple values)-->
  <fieldType name="strip_leading_zeroes_mult" class="solr.TextField" positionIncrementGap="1">
    <analyzer>
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(^[0]+)" replacement="" />
      <tokenizer class="solr.KeywordTokenizerFactory" />
      <filter class="solr.LowerCaseFilterFactory" />
    </analyzer>
  </fieldType>
  <!-- Can insert dashes, spaces, etc. in the wrong place and still match. -->
  <fieldType name="strip_spaces_and_separators" class="solr.TextField" positionIncrementGap="100"
  autoGeneratePhraseQueries="true">
    <analyzer>
      <tokenizer class="solr.KeywordTokenizerFactory" />
      <filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="0" generateNumberParts="0"
      catenateWords="0" catenateNumbers="0" catenateAll="1" />
      <filter class="solr.LowerCaseFilterFactory" />
    </analyzer>
  </fieldType>
  <!-- Strips leading zeroes from a string (multiple values); also insert dashes, spaces, etc. in
      the wrong place and still match -->
  <!-- USED FOR: (Artist|Label).(isni|ipi) -->
  <fieldType name="strip_leading_zeroes_concat_mult" class="solr.TextField" positionIncrementGap="1">
    <analyzer>
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([\s]+)" replacement="" />
      <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(^[0]+)" replacement="" />
      <tokenizer class="solr.StandardTokenizerFactory" />
      <filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="0" generateNumberParts="0"
      catenateWords="0" catenateNumbers="0" catenateAll="1" />
      <filter class="solr.LowerCaseFilterFactory" />
    </analyzer>
  </fieldType>
  <!--
      Example of using PathHierarchyTokenizerFactory at index time, so
      queries for paths match documents at that path, or in descendent paths
    -->
  <fieldType name="descendent_path" class="solr.TextField">
    <analyzer type="index">
      <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.KeywordTokenizerFactory" />
    </analyzer>
  </fieldType>
  <!--
      Example of using PathHierarchyTokenizerFactory at query time, so
      queries for paths match documents at that path, or in ancestor paths
    -->
  <fieldType name="ancestor_path" class="solr.TextField">
    <analyzer type="index">
      <tokenizer class="solr.KeywordTokenizerFactory" />
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
    </analyzer>
  </fieldType>
</types>
